#+title: MathematicalProgram Tutorial
#+options: tex:t

* Background
Many engineering problems can be formulated as mathematical optimization
problems, and solved by numerical solvers. A generic mathematical
optimization problem can be formulated as

$\begin{aligned} \begin{array}{rl}  \min_x \; & f(x)  \\\text{subject to} \; & x \in\mathcal{S}  \end{array}  \qquad  \boxed{  \begin{array}{ll}  \text{The real-valued decision variable is} &x\\  \text{The real-valued cost function is} &f(x)\\  \text{The constraint set is} &\mathcal{S}\\  \text{The optimal } x \text{ that minimizes the cost function is} &x^*  \end{array}  } \end{aligned}$

where $x$ is the real-valued decision variable(s), $f(x)$ is the
real-valued /cost function/, $\mathcal{S}$ is the constraint set for
$x$. Our goal is to find the optimal $x^*$ within the constraint set
$\mathcal{S}$, such that $x^*$ minimizes the cost function $f(x)$.

For example, the following optimization problem determines the value of
$x$ that minimizes $x^3 + 2x + 1$ subject to $x \ge 1$.
$\begin{aligned} \begin{array}{rl} \min_x\;&x^3 + 2x + 1\\ \text{subject to}\;\;&x \ge 1 \end{array} \quad \boxed{  \begin{array}{ll}  \text{The real-valued decision variable is} & x\\  \text{The real-valued cost function }f(x) \text{ is} & x^3 + 2x + 1\\  \text{The set }\mathcal{S} \text{ of constraints is} & x \ge 1\\  \text{The value that minimizes the cost function is} & x^* = 1  \end{array} } \end{aligned}$

In general, how an optimization problem is solved depends on its
categorization (categories include Linear Programming, Quadratic
Programming, Mixed-integer Programming, etc.). Categorization depends on
properties of both the cost function $f(x)$ and the constraint set
$\mathcal{S}$. For example, if the cost function $f(x)$ is a linear
function of $x$, and the constraint $\mathcal{S}$ is a linear set
$\mathcal{S} = \{x | Ax\le b\}$, then we have a /linear programming/
problem, which is efficiently solved with certain solvers.

There are multiple solvers for each category of optimization problems,
but each solver has its own API and data structures. Frequently, users
need to rewrite code when they switch solvers. To remedy this, Drake
provides a common API through the /MathematicalProgram/ class. In
addition to avoiding solver-specific code, the constraint and cost
functions can be written in symbolic form (which makes code more
readable). In these ways, Drake's MathematicalProgram is akin to
[[https://yalmip.github.io/][YALMIP]] in MATLAB or
[[https://github.com/JuliaOpt/JuMP.jl][JuMP]] in Julia, and we support
both Python and C++. Note: Drake supports many
[[https://drake.mit.edu/doxygen_cxx/group__solvers.html][solvers]] (some
are open-source and some require a license).

Drake can formulate and solve the following categories of optimization
problems
 + Linear programming
 + Quadratic programming
 + Second-order cone programming
 + Nonlinear nonconvex programming
 + Semidefinite programming
 + Sum-of-squares programming
 + Mixed-integer programming (mixed-integer linear programming, mixed-integer quadratic programming, mixed-integer second-order cone programming).
 + Linear complementarity problem

This tutorial provides the basics of Drake's MathematicalProgram.
Advanced tutorials are available at the [[*Advanced tutorials][bottom]] of this document.

** Basics of MathematicalProgram class
Drake's MathematicalProgram class contains the mathematical formulation of an optimization problem,
namely the decision variables $x$, the cost function $f(x)$, and the constraint set $\mathcal{S}$.

*** Initialize a MathematicalProgram object
To initialize this class, first create an empty MathematicalProgram as

#+begin_src cpp
  #include "drake/solvers/mathematical_program.h"
  // ...
  drake::solvers::MathematicalProgram prog;
  // ...
#+end_src

*** Adding decision variables
Shown below, the function ~NewContinuousVariables~ adds two new continuous decision variables to ~prog~.  The newly added variables are returned as ~x~ (~VectorXDecisionVariable~).
Note the range of the variable is a continuous set, as opposed to binary variables which only take discrete value 0 or 1.

The default names of the variable in *x* are "x(0)" and "x(1)".  The next line prints the default names and types in ~x~,
whereas the second line prints the symbolic expression "1 + 2x[0] + 3x[1] + 4x[1]".

#+begin_src cpp
  auto x = prog.NewContinuousVariables(2);
  std::cout << x << "\n";
  /**
   ,* Output:
   ,* x(0)
   ,* x(1)
   ,*/

  std::cout << 1 + 2 * x[0] + 3 * x[1] + 4 * x[1] << "\n";
  /**
   ,* Output:
   ,* (1 + 2 * x(0) + 7 * x(1))
   ,*/
#+end_src

To create an array ~y~ of two variables named "dog(0)"" and "dog(1)", pass the name "dog" as a second argument to ~NewContinuousVariables()~.
Also shown below is the printout of the two variables in ~y~ and a symbolic expression involving ~y~.

#+begin_src cpp
  auto y = prog.NewContinuousVariables(2, "dog");
  std::cout << y << "\n";
  /**
   ,* Output:
   ,* dog(0)
   ,* dog(1)
   ,*/

  std::cout << y[0] + y[0] + y[1] * y[1] * y[1] << "\n";
  /**
   ,* Output:
   ,* (2 * dog(0) + pow(dog(1), 3))
   ,*/
#+end_src

To create a $3 \times 2$ matrix of variables named "A", type

#+begin_src cpp
  auto var_matrix = prog.NewContinuousVariables(3, 2, "A");
  std::cout << var_matrix << "\n";
  /**
   ,* Output:
   ,* A(0,0) A(0,1)
   ,* A(1,0) A(1,1)
   ,* A(2,0) A(2,1)
   ,*/
#+end_src

*** Playground
Launch compiler-explorer and then click [[http://localhost:10240/#g:!((g:!((g:!((h:codeEditor,i:(filename:'1',fontScale:14,fontUsePx:'0',j:1,lang:c%2B%2B,selection:(endColumn:36,endLineNumber:15,positionColumn:36,positionLineNumber:15,selectionStartColumn:36,selectionStartLineNumber:15,startColumn:36,startLineNumber:15),source:'%23include+%3Cdrake/solvers/mathematical_program.h%3E%0A%0Atemplate+%3Ctypename+T%3E%0Avoid+print(const+T%26+value)+%7B%0A++std::cout+%3C%3C+value+%3C%3C+%22%5Cn---%5Cn%22%3B%0A%7D%0A%0Aint+main()+%7B%0A++drake::solvers::MathematicalProgram+prog%3B%0A++auto+x+%3D+prog.NewContinuousVariables(2)%3B%0A%0A++print(x)%3B%0A++print(1+%2B+2+*+x%5B0%5D+%2B+3+*+x%5B1%5D+%2B+4+*+x%5B1%5D)%3B%0A%0A++auto+y+%3D+prog.NewContinuousVariables(2,+%22dog%22)%3B%0A++print(y)%3B%0A++print(y%5B0%5D+%2B+y%5B0%5D+%2B+y%5B1%5D+*+y%5B1%5D+*+y%5B1%5D)%3B%0A%0A++auto+var_matrix+%3D+prog.NewContinuousVariables(3,+2,+%22A%22)%3B%0A++print(var_matrix)%3B%0A%0A++return+0%3B%0A%7D%0A'),l:'5',n:'0',o:'C%2B%2B+source+%231',t:'0')),k:54.063974829575244,l:'4',n:'0',o:'',s:0,t:'0'),(g:!((h:compiler,i:(compiler:g9,filters:(b:'0',binary:'1',commentOnly:'0',demangle:'0',directives:'0',execute:'0',intel:'0',libraryCode:'0',trim:'1'),flagsViewOpen:'1',fontScale:14,fontUsePx:'0',j:1,lang:c%2B%2B,libs:!((name:eigen,ver:'337'),(name:drake,ver:'110')),options:'-std%3Dc%2B%2B17',selection:(endColumn:1,endLineNumber:1,positionColumn:1,positionLineNumber:1,selectionStartColumn:1,selectionStartLineNumber:1,startColumn:1,startLineNumber:1),source:1,tree:'1'),l:'5',n:'0',o:'g%2B%2B+9+(C%2B%2B,+Editor+%231,+Compiler+%231)',t:'0'),(h:output,i:(compiler:1,editor:1,fontScale:14,fontUsePx:'0',tree:'1',wrap:'1'),l:'5',n:'0',o:'Output+of+g%2B%2B+9+(Compiler+%231)',t:'0')),k:45.936025170424756,l:'4',m:100,n:'0',o:'',s:1,t:'0')),l:'2',n:'0',o:'',t:'0')),version:4 ][this]].

* Advanced tutorials
